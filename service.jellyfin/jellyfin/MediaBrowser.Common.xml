<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MediaBrowser.Common</name>
    </assembly>
    <members>
        <member name="T:MediaBrowser.Common.Configuration.ConfigurationStore">
            <summary>
            Describes a single entry in the application configuration.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.ConfigurationStore.Key">
            <summary>
            Gets or sets the unique identifier for the configuration.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.ConfigurationStore.ConfigurationType">
            <summary>
            Gets or sets the type used to store the data for this configuration entry.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.ConfigurationUpdateEventArgs.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.ConfigurationUpdateEventArgs.NewConfiguration">
            <summary>
            Gets or sets the new configuration.
            </summary>
            <value>The new configuration.</value>
        </member>
        <member name="T:MediaBrowser.Common.Configuration.EncodingConfigurationExtensions">
            <summary>
            Class containing extension methods for working with the encoding configuration.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.EncodingConfigurationExtensions.GetEncodingOptions(MediaBrowser.Common.Configuration.IConfigurationManager)">
            <summary>
            Gets the encoding options.
            </summary>
            <param name="configurationManager">The configuration manager.</param>
            <returns>The encoding options.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.EncodingConfigurationExtensions.GetTranscodePath(MediaBrowser.Common.Configuration.IConfigurationManager)">
            <summary>
            Retrieves the transcoding temp path from the encoding configuration, falling back to a default if no path
            is specified in configuration. If the directory does not exist, it will be created.
            </summary>
            <param name="configurationManager">The configuration manager.</param>
            <returns>The transcoding temp path.</returns>
            <exception cref="T:System.UnauthorizedAccessException">If the directory does not exist, and the caller does not have the required permission to create it.</exception>
            <exception cref="T:System.NotSupportedException">If there is a custom path transcoding path specified, but it is invalid.</exception>
            <exception cref="T:System.IO.IOException">If the directory does not exist, and it also could not be created.</exception>
        </member>
        <member name="T:MediaBrowser.Common.Configuration.IApplicationPaths">
            <summary>
            Interface IApplicationPaths.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.ProgramDataPath">
            <summary>
            Gets the path to the program data folder.
            </summary>
            <value>The program data path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.WebPath">
            <summary>
            Gets the path to the web UI resources folder.
            </summary>
            <remarks>
            This value is not relevant if the server is configured to not host any static web content. Additionally,
            the value for <see cref="P:MediaBrowser.Model.Configuration.ServerConfiguration.DashboardSourcePath"/> takes precedence over this one.
            </remarks>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.ProgramSystemPath">
            <summary>
            Gets the path to the program system folder.
            </summary>
            <value>The program data path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.DataPath">
            <summary>
            Gets the folder path to the data directory.
            </summary>
            <value>The data directory.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.ImageCachePath">
            <summary>
            Gets the image cache path.
            </summary>
            <value>The image cache path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.PluginsPath">
            <summary>
            Gets the path to the plugin directory.
            </summary>
            <value>The plugins path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.PluginConfigurationsPath">
            <summary>
            Gets the path to the plugin configurations directory.
            </summary>
            <value>The plugin configurations path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.LogDirectoryPath">
            <summary>
            Gets the path to the log directory.
            </summary>
            <value>The log directory path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.ConfigurationDirectoryPath">
            <summary>
            Gets the path to the application configuration root directory.
            </summary>
            <value>The configuration directory path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.SystemConfigurationFilePath">
            <summary>
            Gets the path to the system configuration file.
            </summary>
            <value>The system configuration file path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.CachePath">
            <summary>
            Gets the folder path to the cache directory.
            </summary>
            <value>The cache directory.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.TempDirectory">
            <summary>
            Gets the folder path to the temp directory within the cache folder.
            </summary>
            <value>The temp directory.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IApplicationPaths.VirtualDataPath">
            <summary>
            Gets the magic string used for virtual path manipulation.
            </summary>
            <value>The magic string used for virtual path manipulation.</value>
        </member>
        <member name="T:MediaBrowser.Common.Configuration.IConfigurationFactory">
            <summary>
            Provides an interface to retrieve a configuration store. Classes with this interface are scanned for at
            application start to dynamically register configuration for various modules/plugins.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationFactory.GetConfigurations">
            <summary>
            Get the configuration store for this module.
            </summary>
            <returns>The configuration store.</returns>
        </member>
        <member name="E:MediaBrowser.Common.Configuration.IConfigurationManager.NamedConfigurationUpdating">
            <summary>
            Occurs when [configuration updating].
            </summary>
        </member>
        <member name="E:MediaBrowser.Common.Configuration.IConfigurationManager.ConfigurationUpdated">
            <summary>
            Occurs when [configuration updated].
            </summary>
        </member>
        <member name="E:MediaBrowser.Common.Configuration.IConfigurationManager.NamedConfigurationUpdated">
            <summary>
            Occurs when [named configuration updated].
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IConfigurationManager.CommonApplicationPaths">
            <summary>
            Gets the application paths.
            </summary>
            <value>The application paths.</value>
        </member>
        <member name="P:MediaBrowser.Common.Configuration.IConfigurationManager.CommonConfiguration">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationManager.SaveConfiguration">
            <summary>
            Saves the configuration.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationManager.ReplaceConfiguration(MediaBrowser.Model.Configuration.BaseApplicationConfiguration)">
            <summary>
            Replaces the configuration.
            </summary>
            <param name="newConfiguration">The new configuration.</param>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationManager.GetConfiguration(System.String)">
            <summary>
            Gets the configuration.
            </summary>
            <param name="key">The key.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationManager.GetConfigurationType(System.String)">
            <summary>
            Gets the type of the configuration.
            </summary>
            <param name="key">The key.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationManager.SaveConfiguration(System.String,System.Object)">
            <summary>
            Saves the configuration.
            </summary>
            <param name="key">The key.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IConfigurationManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Common.Configuration.IConfigurationFactory})">
            <summary>
            Adds the parts.
            </summary>
            <param name="factories">The factories.</param>
        </member>
        <member name="T:MediaBrowser.Common.Configuration.IValidatingConfiguration">
            <summary>
            A configuration store that can be validated.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Configuration.IValidatingConfiguration.Validate(System.Object,System.Object)">
            <summary>
            Validation method to be invoked before saving the configuration.
            </summary>
            <param name="oldConfig">The old configuration.</param>
            <param name="newConfig">The new configuration.</param>
        </member>
        <member name="T:MediaBrowser.Common.Cryptography.Constants">
            <summary>
            Class containing global constants for Jellyfin Cryptography.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Cryptography.Constants.DefaultSaltLength">
            <summary>
            The default length for new salts.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Cryptography.Constants.DefaultIterations">
            <summary>
            The default amount of iterations for hashing passwords.
            </summary>
        </member>
        <member name="T:MediaBrowser.Common.Cryptography.CryptoExtensions">
            <summary>
            Class containing extension methods for working with Jellyfin cryptography objects.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Cryptography.CryptoExtensions.CreatePasswordHash(MediaBrowser.Model.Cryptography.ICryptoProvider,System.String)">
            <summary>
            Creates a new <see cref="T:MediaBrowser.Common.Cryptography.PasswordHash" /> instance.
            </summary>
            <param name="cryptoProvider">The <see cref="T:MediaBrowser.Model.Cryptography.ICryptoProvider" /> instance used.</param>
            <param name="password">The password that will be hashed.</param>
            <returns>A <see cref="T:MediaBrowser.Common.Cryptography.PasswordHash" /> instance with the hash method, hash, salt and number of iterations.</returns>
        </member>
        <member name="P:MediaBrowser.Common.Cryptography.PasswordHash.Id">
            <summary>
            Gets the symbolic name for the function used.
            </summary>
            <value>Returns the symbolic name for the function used.</value>
        </member>
        <member name="P:MediaBrowser.Common.Cryptography.PasswordHash.Parameters">
            <summary>
            Gets the additional parameters used by the hash function.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Cryptography.PasswordHash.Salt">
            <summary>
            Gets the salt used for hashing the password.
            </summary>
            <value>Returns the salt used for hashing the password.</value>
        </member>
        <member name="P:MediaBrowser.Common.Cryptography.PasswordHash.Hash">
            <summary>
            Gets the hashed password.
            </summary>
            <value>Return the hashed password.</value>
        </member>
        <member name="M:MediaBrowser.Common.Cryptography.PasswordHash.ToString">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Common.Events.EventHelper">
            <summary>
            Class EventHelper.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Events.EventHelper.QueueEventIfNotNull(System.EventHandler,System.Object,System.EventArgs,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Fires the event.
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:MediaBrowser.Common.Events.EventHelper.QueueEventIfNotNull``1(System.EventHandler{``0},System.Object,``0,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Queues the event.
            </summary>
            <typeparam name="T">Argument type for the <c>handler</c>.</typeparam>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="args">The args.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="T:MediaBrowser.Common.Extensions.BaseExtensions">
            <summary>
            Class BaseExtensions.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.BaseExtensions.StripHtml(System.String)">
            <summary>
            Strips the HTML.
            </summary>
            <param name="htmlString">The HTML string.</param>
            <returns><see cref="T:System.String" />.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.BaseExtensions.GetMD5(System.String)">
            <summary>
            Gets the Md5.
            </summary>
            <param name="str">The string.</param>
            <returns><see cref="T:System.Guid" />.</returns>
        </member>
        <member name="T:MediaBrowser.Common.Extensions.CopyToExtensions">
            <summary>
            Provides <c>CopyTo</c> extensions methods for <see cref="T:System.Collections.Generic.IReadOnlyList`1" />.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.CopyToExtensions.CopyTo``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Copies all the elements of the current collection to the specified list
            starting at the specified destination array index. The index is specified as a 32-bit integer.
            </summary>
            <param name="source">The current collection that is the source of the elements.</param>
            <param name="destination">The list that is the destination of the elements copied from the current collection.</param>
            <param name="index">A 32-bit integer that represents the index in <c>destination</c> at which copying begins.</param>
            <typeparam name="T">The type of the array.</typeparam>
        </member>
        <member name="T:MediaBrowser.Common.Extensions.MethodNotAllowedException">
            <summary>
            Class MethodNotAllowedException.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.MethodNotAllowedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Extensions.MethodNotAllowedException" /> class.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.MethodNotAllowedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Extensions.MethodNotAllowedException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:MediaBrowser.Common.Extensions.ProcessExtensions">
            <summary>
            Extension methods for <see cref="T:System.Diagnostics.Process"/>.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.ProcessExtensions.WaitForExitAsync(System.Diagnostics.Process,System.TimeSpan)">
            <summary>
            Asynchronously wait for the process to exit.
            </summary>
            <param name="process">The process to wait for.</param>
            <param name="timeout">The duration to wait before cancelling waiting for the task.</param>
            <returns>True if the task exited normally, false if the timeout elapsed before the process exited.</returns>
            <exception cref="T:System.InvalidOperationException">If <see cref="P:System.Diagnostics.Process.EnableRaisingEvents"/> is not set to true for the process.</exception>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.ProcessExtensions.WaitForExitAsync(System.Diagnostics.Process,System.Threading.CancellationToken)">
            <summary>
            Asynchronously wait for the process to exit.
            </summary>
            <param name="process">The process to wait for.</param>
            <param name="cancelToken">A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the process to exit.</param>
            <returns>True if the task exited normally, false if cancelled before the process exited.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.ProcessExtensions.HasExitedSafe(System.Diagnostics.Process)">
            <summary>
            Gets a value indicating whether the associated process has been terminated using
            <see cref="P:System.Diagnostics.Process.HasExited"/>. This is safe to call even if there is no operating system process
            associated with the <see cref="T:System.Diagnostics.Process"/>.
            </summary>
            <param name="process">The process to check the exit status for.</param>
            <returns>
            True if the operating system process referenced by the <see cref="T:System.Diagnostics.Process"/> component has
            terminated, or if there is no associated operating system process; otherwise, false.
            </returns>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.RateLimitExceededException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Extensions.RateLimitExceededException" /> class.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.RateLimitExceededException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Extensions.RateLimitExceededException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:MediaBrowser.Common.Extensions.ResourceNotFoundException">
            <summary>
            Class ResourceNotFoundException.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.ResourceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Extensions.ResourceNotFoundException" /> class.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.ResourceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Extensions.ResourceNotFoundException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:MediaBrowser.Common.Extensions.ShuffleExtensions">
            <summary>
            Provides <c>Shuffle</c> extensions methods for <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.ShuffleExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles the items in a list.
            </summary>
            <param name="list">The list that should get shuffled.</param>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.ShuffleExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Shuffles the items in a list.
            </summary>
            <param name="list">The list that should get shuffled.</param>
            <param name="rng">The random number generator to use.</param>
            <typeparam name="T">The type.</typeparam>
        </member>
        <member name="T:MediaBrowser.Common.Extensions.StringExtensions">
            <summary>
            Extensions methods to simplify string operations.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.StringExtensions.LeftPart(System.ReadOnlySpan{System.Char},System.Char)">
            <summary>
            Returns the part on the left of the <c>needle</c>.
            </summary>
            <param name="haystack">The string to seek.</param>
            <param name="needle">The needle to find.</param>
            <returns>The part left of the <paramref name="needle" />.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Extensions.StringExtensions.LeftPart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
            <summary>
            Returns the part on the left of the <c>needle</c>.
            </summary>
            <param name="haystack">The string to seek.</param>
            <param name="needle">The needle to find.</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules for the search.</param>
            <returns>The part left of the <c>needle</c>.</returns>
        </member>
        <member name="T:MediaBrowser.Common.Hex">
            <summary>
            Encoding and decoding hex strings.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Hex.HexLookup">
            <summary>
            Gets a map from an ASCII char to its hex value shifted,
            e.g. <c>b</c> -> 11. 0xFF means it's not a hex symbol.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Hex.Encode(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Encodes each element of the specified bytes as its hexadecimal string representation.
            </summary>
            <param name="bytes">An array of bytes.</param>
            <param name="lowercase"><c>true</c> to use lowercase hexadecimal characters; otherwise <c>false</c>.</param>
            <returns><c>bytes</c> as a hex string.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Hex.Decode(System.ReadOnlySpan{System.Char})">
            <summary>
            Decodes a hex string into bytes.
            </summary>
            <param name="str">The <see cref="T:System.String" />.</param>
            <returns>The decoded bytes.</returns>
        </member>
        <member name="T:MediaBrowser.Common.IApplicationHost">
            <summary>
            An interface to be implemented by the applications hosting a kernel.
            </summary>
        </member>
        <member name="E:MediaBrowser.Common.IApplicationHost.HasPendingRestartChanged">
            <summary>
            Occurs when [has pending restart changed].
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.SystemId">
            <summary>
            Gets the device identifier.
            </summary>
            <value>The device identifier.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.HasPendingRestart">
            <summary>
            Gets a value indicating whether this instance has pending kernel reload.
            </summary>
            <value><c>true</c> if this instance has pending kernel reload; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.IsShuttingDown">
            <summary>
            Gets a value indicating whether this instance is currently shutting down.
            </summary>
            <value><c>true</c> if this instance is shutting down; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.CanSelfRestart">
            <summary>
            Gets a value indicating whether this instance can self restart.
            </summary>
            <value><c>true</c> if this instance can self restart; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.ApplicationVersion">
            <summary>
            Gets the application version.
            </summary>
            <value>The application version.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.ApplicationVersionString">
            <summary>
            Gets the application version.
            </summary>
            <value>The application version.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.ApplicationUserAgent">
            <summary>
            Gets the application user agent.
            </summary>
            <value>The application user agent.</value>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.ApplicationUserAgentAddress">
            <summary>
            Gets the email address for use within a comment section of a user agent field.
            Presently used to provide contact information to MusicBrainz service.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.IApplicationHost.Plugins">
            <summary>
            Gets the plugins.
            </summary>
            <value>The plugins.</value>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.NotifyPendingRestart">
            <summary>
            Notifies the pending restart.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.Restart">
            <summary>
            Restarts this instance.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.GetExports``1(System.Boolean)">
            <summary>
            Gets the exports.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="manageLifetime">If set to <c>true</c> [manage lifetime].</param>
            <returns><see cref="T:System.Collections.Generic.IReadOnlyCollection`1" />.</returns>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.Resolve``1">
            <summary>
            Resolves this instance.
            </summary>
            <typeparam name="T">The <c>Type</c>.</typeparam>
            <returns>``0.</returns>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.Shutdown">
            <summary>
            Shuts down.
            </summary>
            <returns>A task.</returns>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.RemovePlugin(MediaBrowser.Common.Plugins.IPlugin)">
            <summary>
            Removes the plugin.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.Init(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes this instance.
            </summary>
            <param name="serviceCollection">The service collection.</param>
        </member>
        <member name="M:MediaBrowser.Common.IApplicationHost.CreateInstance(System.Type)">
            <summary>
            Creates the instance.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:MediaBrowser.Common.Json.Converters.JsonGuidConverter">
            <summary>
            Converts a GUID object or value to/from JSON.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Json.Converters.JsonGuidConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Common.Json.Converters.JsonGuidConverter.Write(System.Text.Json.Utf8JsonWriter,System.Guid,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Common.Json.Converters.JsonInt32Converter">
            <summary>
            Converts a GUID object or value to/from JSON.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Json.Converters.JsonInt32Converter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Common.Json.Converters.JsonInt32Converter.Write(System.Text.Json.Utf8JsonWriter,System.Int32,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Common.Json.Converters.JsonNonStringKeyDictionaryConverter`2">
            <summary>
            Converter for Dictionaries without string key.
            TODO This can be removed when System.Text.Json supports Dictionaries with non-string keys.
            </summary>
            <typeparam name="TKey">Type of key.</typeparam>
            <typeparam name="TValue">Type of value.</typeparam>
        </member>
        <member name="M:MediaBrowser.Common.Json.Converters.JsonNonStringKeyDictionaryConverter`2.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read JSON.
            </summary>
            <param name="reader">The Utf8JsonReader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">The json serializer options.</param>
            <returns>Typed dictionary.</returns>
            <exception cref="T:System.NotSupportedException">Not supported.</exception>
        </member>
        <member name="M:MediaBrowser.Common.Json.Converters.JsonNonStringKeyDictionaryConverter`2.Write(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.IDictionary{`0,`1},System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write dictionary as Json.
            </summary>
            <param name="writer">The Utf8JsonWriter.</param>
            <param name="value">The dictionary value.</param>
            <param name="options">The Json serializer options.</param>
        </member>
        <member name="T:MediaBrowser.Common.Json.Converters.JsonNonStringKeyDictionaryConverterFactory">
            <summary>
            https://github.com/dotnet/runtime/issues/30524#issuecomment-524619972.
            TODO This can be removed when System.Text.Json supports Dictionaries with non-string keys.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Json.Converters.JsonNonStringKeyDictionaryConverterFactory.CanConvert(System.Type)">
            <summary>
            Only convert objects that implement IDictionary and do not have string keys.
            </summary>
            <param name="typeToConvert">Type convert.</param>
            <returns>Conversion ability.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Json.Converters.JsonNonStringKeyDictionaryConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Create converter for generic dictionary type.
            </summary>
            <param name="typeToConvert">Type to convert.</param>
            <param name="options">Json serializer options.</param>
            <returns>JsonConverter for given type.</returns>
        </member>
        <member name="T:MediaBrowser.Common.Json.JsonDefaults">
            <summary>
            Helper class for having compatible JSON throughout the codebase.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Json.JsonDefaults.GetOptions">
            <summary>
            Gets the default <see cref="T:System.Text.Json.JsonSerializerOptions" /> options.
            </summary>
            <returns>The default <see cref="T:System.Text.Json.JsonSerializerOptions" /> options.</returns>
        </member>
        <member name="T:MediaBrowser.Common.Net.HttpRequestOptions">
            <summary>
            Class HttpRequestOptions.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Net.HttpRequestOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Net.HttpRequestOptions"/> class.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.HttpRequestOptions.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:MediaBrowser.Common.Net.HttpRequestOptions.AcceptHeader">
            <summary>
            Gets or sets the accept header.
            </summary>
            <value>The accept header.</value>
        </member>
        <member name="P:MediaBrowser.Common.Net.HttpRequestOptions.CancellationToken">
            <summary>
            Gets or sets the cancellation token.
            </summary>
            <value>The cancellation token.</value>
        </member>
        <member name="P:MediaBrowser.Common.Net.HttpRequestOptions.UserAgent">
            <summary>
            Gets or sets the user agent.
            </summary>
            <value>The user agent.</value>
        </member>
        <member name="P:MediaBrowser.Common.Net.HttpRequestOptions.Referer">
            <summary>
            Gets or sets the referrer.
            </summary>
            <value>The referrer.</value>
        </member>
        <member name="P:MediaBrowser.Common.Net.HttpRequestOptions.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="T:MediaBrowser.Common.Net.HttpResponseInfo">
            <summary>
            Class HttpResponseInfo.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Net.HttpResponseInfo.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:MediaBrowser.Common.Net.HttpResponseInfo.ResponseUrl">
            <summary>
            Gets or sets the response URL.
            </summary>
            <value>The response URL.</value>
        </member>
        <member name="P:MediaBrowser.Common.Net.HttpResponseInfo.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:MediaBrowser.Common.Net.HttpResponseInfo.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:MediaBrowser.Common.Net.HttpResponseInfo.TempFilePath">
            <summary>
            Gets or sets the temp file path.
            </summary>
            <value>The temp file path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Net.HttpResponseInfo.ContentLength">
            <summary>
            Gets or sets the length of the content.
            </summary>
            <value>The length of the content.</value>
        </member>
        <member name="P:MediaBrowser.Common.Net.HttpResponseInfo.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="P:MediaBrowser.Common.Net.HttpResponseInfo.ContentHeaders">
            <summary>
            Gets or sets the content headers.
            </summary>
            <value>The content headers.</value>
        </member>
        <member name="M:MediaBrowser.Common.Net.HttpResponseInfo.Dispose">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Common.Net.IHttpClient">
            <summary>
            Interface IHttpClient.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Net.IHttpClient.GetResponse(MediaBrowser.Common.Net.HttpRequestOptions)">
            <summary>
            Gets the response.
            </summary>
            <param name="options">The options.</param>
            <returns>Task{HttpResponseInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IHttpClient.Get(MediaBrowser.Common.Net.HttpRequestOptions)">
            <summary>
            Gets the specified options.
            </summary>
            <param name="options">The options.</param>
            <returns>Task{Stream}.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IHttpClient.SendAsync(MediaBrowser.Common.Net.HttpRequestOptions,System.String)">
            <summary>
            Warning: Deprecated function,
            use 'Task{HttpResponseInfo} SendAsync(HttpRequestOptions options, HttpMethod httpMethod);' instead
            Sends the asynchronous.
            </summary>
            <param name="options">The options.</param>
            <param name="httpMethod">The HTTP method.</param>
            <returns>Task{HttpResponseInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IHttpClient.SendAsync(MediaBrowser.Common.Net.HttpRequestOptions,System.Net.Http.HttpMethod)">
            <summary>
            Sends the asynchronous.
            </summary>
            <param name="options">The options.</param>
            <param name="httpMethod">The HTTP method.</param>
            <returns>Task{HttpResponseInfo}.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.IHttpClient.Post(MediaBrowser.Common.Net.HttpRequestOptions)">
            <summary>
            Posts the specified options.
            </summary>
            <param name="options">The options.</param>
            <returns>Task{HttpResponseInfo}.</returns>
        </member>
        <member name="P:MediaBrowser.Common.Net.INetworkManager.LocalSubnetsFn">
            <summary>
            Gets or sets a function to return the list of user defined LAN addresses.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.GetRandomUnusedTcpPort">
            <summary>
            Gets a random port TCP number that is currently available.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.GetRandomUnusedUdpPort">
            <summary>
            Gets a random port UDP number that is currently available.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.GetMacAddresses">
            <summary>
            Returns the MAC Address from first Network Card in Computer.
            </summary>
            <returns>The MAC Address.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsInPrivateAddressSpace(System.String)">
            <summary>
            Determines whether [is in private address space] [the specified endpoint].
            </summary>
            <param name="endpoint">The endpoint.</param>
            <returns><c>true</c> if [is in private address space] [the specified endpoint]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsInPrivateAddressSpaceAndLocalSubnet(System.String)">
            <summary>
            Determines whether [is in private address space 10.x.x.x] [the specified endpoint] and exists in the subnets returned by GetSubnets().
            </summary>
            <param name="endpoint">The endpoint.</param>
            <returns><c>true</c> if [is in private address space 10.x.x.x] [the specified endpoint]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsInLocalNetwork(System.String)">
            <summary>
            Determines whether [is in local network] [the specified endpoint].
            </summary>
            <param name="endpoint">The endpoint.</param>
            <returns><c>true</c> if [is in local network] [the specified endpoint]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.GetLocalIpAddresses">
            <summary>
            Investigates an caches a list of interface addresses, excluding local link and LAN excluded addresses.
            </summary>
            <returns>The list of ipaddresses.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsAddressInSubnets(System.String,System.String[])">
            <summary>
            Checks if the given address falls within the ranges given in [subnets]. The addresses in subnets can be hosts or subnets in the CIDR format.
            </summary>
            <param name="addressString">The address to check.</param>
            <param name="subnets">If true, check against addresses in the LAN settings surrounded by brackets ([]).</param>
            <returns><c>true</c>if the address is in at least one of the given subnets, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsAddressInSubnets(System.Net.IPAddress,System.Boolean,System.Boolean)">
            <summary>
            Returns true if address is in the LAN list in the config file.
            </summary>
            <param name="address">The address to check.</param>
            <param name="excludeInterfaces">If true, check against addresses in the LAN settings which have [] arroud and return true if it matches the address give in address.</param>
            <param name="excludeRFC">If true, returns false if address is in the 127.x.x.x or 169.128.x.x range.</param>
            <returns><c>false</c>if the address isn't in the LAN list, <c>true</c> if the address has been defined as a LAN address.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.IsInSameSubnet(System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Checks if address is in the LAN list in the config file.
            </summary>
            <param name="address1">Source address to check.</param>
            <param name="address2">Destination address to check against.</param>
            <param name="subnetMask">Destination subnet to check against.</param>
            <returns><c>true/false</c>depending on whether address1 is in the same subnet as IPAddress2 with subnetMask.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Net.INetworkManager.GetLocalIpSubnetMask(System.Net.IPAddress)">
            <summary>
            Returns the subnet mask of an interface with the given address.
            </summary>
            <param name="address">The address to check.</param>
            <returns>Returns the subnet mask of an interface with the given address, or null if an interface match cannot be found.</returns>
        </member>
        <member name="T:MediaBrowser.Common.Plugins.BasePlugin">
            <summary>
            Provides a common base class for all plugins.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin.Id">
            <summary>
            Gets the unique id.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin.Version">
            <summary>
            Gets the plugin version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin.AssemblyFilePath">
            <summary>
            Gets the path to the assembly file.
            </summary>
            <value>The assembly file path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin.DataFolderPath">
            <summary>
            Gets the full path to the data folder, where the plugin can store any miscellaneous files needed.
            </summary>
            <value>The data folder path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin.CanUninstall">
            <summary>
            Gets a value indicating whether the plugin can be uninstalled.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin.GetPluginInfo">
            <summary>
            Gets the plugin info.
            </summary>
            <returns>PluginInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin.OnUninstalling">
            <summary>
            Called just before the plugin is uninstalled from the server.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin.SetAttributes(System.String,System.String,System.Version)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin.SetId(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Common.Plugins.BasePlugin`1">
            <summary>
            Provides a common base class for all plugins.
            </summary>
            <typeparam name="TConfigurationType">The type of the T configuration type.</typeparam>
        </member>
        <member name="F:MediaBrowser.Common.Plugins.BasePlugin`1._configurationSyncLock">
            <summary>
            The configuration sync lock.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Plugins.BasePlugin`1._configurationSaveLock">
            <summary>
            The configuration save lock.
            </summary>
        </member>
        <member name="F:MediaBrowser.Common.Plugins.BasePlugin`1._configuration">
            <summary>
            The configuration.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin`1.#ctor(MediaBrowser.Common.Configuration.IApplicationPaths,MediaBrowser.Model.Serialization.IXmlSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Common.Plugins.BasePlugin`1" /> class.
            </summary>
            <param name="applicationPaths">The application paths.</param>
            <param name="xmlSerializer">The XML serializer.</param>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.ApplicationPaths">
            <summary>
            Gets the application paths.
            </summary>
            <value>The application paths.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.XmlSerializer">
            <summary>
            Gets the XML serializer.
            </summary>
            <value>The XML serializer.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.ConfigurationType">
            <summary>
            Gets the type of configuration this plugin uses.
            </summary>
            <value>The type of the configuration.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.AssemblyFileName">
            <summary>
            Gets the name the assembly file.
            </summary>
            <value>The name of the assembly file.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.Configuration">
            <summary>
            Gets or sets the plugin configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.ConfigurationFileName">
            <summary>
            Gets the name of the configuration file. Subclasses should override.
            </summary>
            <value>The name of the configuration file.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.ConfigurationFilePath">
            <summary>
            Gets the full path to the configuration file.
            </summary>
            <value>The configuration file path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.BasePlugin`1.MediaBrowser#Common#Plugins#IHasPluginConfiguration#Configuration">
            <summary>
            Gets the plugin configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin`1.SetStartupInfo(System.Action{System.String})">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin`1.SaveConfiguration">
            <summary>
            Saves the current configuration to the file system.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin`1.UpdateConfiguration(MediaBrowser.Model.Plugins.BasePluginConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Common.Plugins.BasePlugin`1.GetPluginInfo">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Common.Plugins.IPlugin">
            <summary>
            Interface IPlugin.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPlugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPlugin.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPlugin.Id">
            <summary>
            Gets the unique id.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPlugin.Version">
            <summary>
            Gets the plugin version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPlugin.AssemblyFilePath">
            <summary>
            Gets the path to the assembly file.
            </summary>
            <value>The assembly file path.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPlugin.CanUninstall">
            <summary>
            Gets a value indicating whether the plugin can be uninstalled.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IPlugin.DataFolderPath">
            <summary>
            Gets the full path to the data folder, where the plugin can store any miscellaneous files needed.
            </summary>
            <value>The data folder path.</value>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPlugin.GetPluginInfo">
            <summary>
            Gets the plugin info.
            </summary>
            <returns>PluginInfo.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IPlugin.OnUninstalling">
            <summary>
            Called when just before the plugin is uninstalled from the server.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IHasPluginConfiguration.ConfigurationType">
            <summary>
            Gets the type of configuration this plugin uses.
            </summary>
            <value>The type of the configuration.</value>
        </member>
        <member name="P:MediaBrowser.Common.Plugins.IHasPluginConfiguration.Configuration">
            <summary>
            Gets the plugin's configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="M:MediaBrowser.Common.Plugins.IHasPluginConfiguration.UpdateConfiguration(MediaBrowser.Model.Plugins.BasePluginConfiguration)">
            <summary>
            Completely overwrites the current configuration with a new copy
            Returns true or false indicating success or failure.
            </summary>
            <param name="configuration">The configuration.</param>
            <exception cref="T:System.ArgumentNullException"><c>configuration</c> is <c>null</c>.</exception>
        </member>
        <member name="T:MediaBrowser.Common.Progress.ActionableProgress`1">
            <summary>
            Class ActionableProgress.
            </summary>
            <typeparam name="T">The type for the action parameter.</typeparam>
        </member>
        <member name="F:MediaBrowser.Common.Progress.ActionableProgress`1._action">
            <summary>
            The _actions.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Progress.ActionableProgress`1.RegisterAction(System.Action{`0})">
            <summary>
            Registers the action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:MediaBrowser.Common.Providers.SubtitleConfigurationFactory.GetConfigurations">
            <inheritdoc />
        </member>
        <member name="E:MediaBrowser.Common.Updates.IInstallationManager.PluginUninstalled">
            <summary>
            Occurs when a plugin is uninstalled.
            </summary>
        </member>
        <member name="E:MediaBrowser.Common.Updates.IInstallationManager.PluginUpdated">
            <summary>
            Occurs when a plugin is updated.
            </summary>
        </member>
        <member name="E:MediaBrowser.Common.Updates.IInstallationManager.PluginInstalled">
            <summary>
            Occurs when a plugin is installed.
            </summary>
        </member>
        <member name="P:MediaBrowser.Common.Updates.IInstallationManager.CompletedInstallations">
            <summary>
            Gets the completed installations.
            </summary>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.GetPackages(System.String,System.Threading.CancellationToken)">
            <summary>
            Parses a plugin manifest at the supplied URL.
            </summary>
            <param name="manifest">The URL to query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IReadOnlyList{PackageInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.GetAvailablePackages(System.Threading.CancellationToken)">
            <summary>
            Gets all available packages.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{IReadOnlyList{PackageInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.FilterPackages(System.Collections.Generic.IEnumerable{MediaBrowser.Model.Updates.PackageInfo},System.String,System.Guid)">
            <summary>
            Returns all plugins matching the requirements.
            </summary>
            <param name="availablePackages">The available packages.</param>
            <param name="name">The name of the plugin.</param>
            <param name="guid">The id of the plugin.</param>
            <returns>All plugins matching the requirements.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.GetCompatibleVersions(System.Collections.Generic.IEnumerable{MediaBrowser.Model.Updates.PackageInfo},System.String,System.Guid,System.Version)">
            <summary>
            Returns all compatible versions ordered from newest to oldest.
            </summary>
            <param name="availablePackages">The available packages.</param>
            <param name="name">The name.</param>
            <param name="guid">The guid of the plugin.</param>
            <param name="minVersion">The minimum required version of the plugin.</param>
            <returns>All compatible versions ordered from newest to oldest.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.GetAvailablePluginUpdates(System.Threading.CancellationToken)">
            <summary>
            Returns the available plugin updates.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The available plugin updates.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.InstallPackage(MediaBrowser.Model.Updates.InstallationInfo,System.Threading.CancellationToken)">
            <summary>
            Installs the package.
            </summary>
            <param name="package">The package.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns><see cref="T:System.Threading.Tasks.Task" />.</returns>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.UninstallPlugin(MediaBrowser.Common.Plugins.IPlugin)">
            <summary>
            Uninstalls a plugin.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:MediaBrowser.Common.Updates.IInstallationManager.CancelInstallation(System.Guid)">
            <summary>
            Cancels the installation.
            </summary>
            <param name="id">The id of the package that is being installed.</param>
            <returns>Returns true if the install was cancelled.</returns>
        </member>
    </members>
</doc>
