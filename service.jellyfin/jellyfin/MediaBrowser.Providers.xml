<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MediaBrowser.Providers</name>
    </assembly>
    <members>
        <member name="M:MediaBrowser.Providers.Books.AudioBookMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.AudioBook},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.AudioBook},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Books.BookMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Book},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Book},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.BoxSets.BoxSetMetadataService.EnableUpdatingGenresFromChildren">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.BoxSets.BoxSetMetadataService.EnableUpdatingOfficialRatingFromChildren">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.BoxSets.BoxSetMetadataService.EnableUpdatingStudiosFromChildren">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.BoxSets.BoxSetMetadataService.EnableUpdatingPremiereDateFromChildren">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.BoxSets.BoxSetMetadataService.GetChildrenForMetadataUpdates(MediaBrowser.Controller.Entities.Movies.BoxSet)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.BoxSets.BoxSetMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Movies.BoxSet},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Movies.BoxSet},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.BoxSets.BoxSetMetadataService.BeforeSaveInternal(MediaBrowser.Controller.Entities.Movies.BoxSet,System.Boolean,MediaBrowser.Controller.Library.ItemUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Channels.ChannelMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Channels.Channel},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Channels.Channel},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Folders.CollectionFolderMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.CollectionFolder},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.CollectionFolder},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Folders.FolderMetadataService.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Folders.FolderMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Folder},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Folder},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Folders.UserViewMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.UserView},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.UserView},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Genres.GenreMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Genre},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Genre},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.LiveTv.LiveTvMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.LiveTv.LiveTvChannel},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.LiveTv.LiveTvChannel},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Manager.ImageSaver">
            <summary>
            Class ImageSaver
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Manager.ImageSaver._config">
            <summary>
            The _config
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Manager.ImageSaver._libraryMonitor">
            <summary>
            The _directory watchers
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.#ctor(MediaBrowser.Controller.Configuration.IServerConfigurationManager,MediaBrowser.Controller.Library.ILibraryMonitor,MediaBrowser.Model.IO.IFileSystem,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Manager.ImageSaver" /> class.
            </summary>
            <param name="config">The config.</param>
            <param name="libraryMonitor">The directory watchers.</param>
            <param name="fileSystem">The file system.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.SaveImage(MediaBrowser.Controller.Entities.BaseItem,System.IO.Stream,System.String,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Saves the image.
            </summary>
            <param name="item">The item.</param>
            <param name="source">The source.</param>
            <param name="mimeType">Type of the MIME.</param>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ArgumentNullException">mimeType</exception>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.SaveImageToLocation(System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves the image to location.
            </summary>
            <param name="source">The source.</param>
            <param name="path">The path.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.GetSavePaths(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.String,System.Boolean)">
            <summary>
            Gets the save paths.
            </summary>
            <param name="item">The item.</param>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="mimeType">Type of the MIME.</param>
            <param name="saveLocally">if set to <c>true</c> [save locally].</param>
            <returns>IEnumerable{System.String}.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.GetCurrentImage(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Int32)">
            <summary>
            Gets the current image path.
            </summary>
            <param name="item">The item.</param>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">
            imageIndex
            or
            imageIndex
            </exception>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.SetImagePath(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.String)">
            <summary>
            Sets the image path.
            </summary>
            <param name="item">The item.</param>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="path">The path.</param>
            <exception cref="T:System.ArgumentNullException">imageIndex
            or
            imageIndex</exception>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.GetStandardSavePath(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.String,System.Boolean)">
            <summary>
            Gets the save path.
            </summary>
            <param name="item">The item.</param>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="mimeType">Type of the MIME.</param>
            <param name="saveLocally">if set to <c>true</c> [save locally].</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">
            imageIndex
            or
            imageIndex
            </exception>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.GetCompatibleSavePaths(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.Nullable{System.Int32},System.String)">
            <summary>
            Gets the compatible save paths.
            </summary>
            <param name="item">The item.</param>
            <param name="type">The type.</param>
            <param name="imageIndex">Index of the image.</param>
            <param name="mimeType">Type of the MIME.</param>
            <returns>IEnumerable{System.String}.</returns>
            <exception cref="T:System.ArgumentNullException">imageIndex</exception>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ImageSaver.GetSavePathForItemInMixedFolder(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Entities.ImageType,System.String,System.String)">
            <summary>
            Gets the save path for item in mixed folder.
            </summary>
            <param name="item">The item.</param>
            <param name="type">The type.</param>
            <param name="imageFilename">The image filename.</param>
            <param name="extension">The extension.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ItemImageProvider.RefreshFromProvider(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Providers.IDynamicImageProvider,MediaBrowser.Controller.Providers.ImageRefreshOptions,MediaBrowser.Model.Configuration.TypeOptions,MediaBrowser.Model.Configuration.LibraryOptions,System.Collections.Generic.ICollection{MediaBrowser.Model.Entities.ImageType},MediaBrowser.Providers.Manager.RefreshResult,System.Threading.CancellationToken)">
            <summary>
            Refreshes from provider.
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Manager.ItemImageProvider._singularImages">
            <summary>
            Image types that are only one per item
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ItemImageProvider.ContainsImages(MediaBrowser.Controller.Entities.BaseItem,System.Collections.Generic.List{MediaBrowser.Model.Entities.ImageType},MediaBrowser.Model.Configuration.TypeOptions,System.Int32,System.Int32)">
            <summary>
            Determines if an item already contains the given images
            </summary>
            <param name="item">The item.</param>
            <param name="images">The images.</param>
            <param name="savedOptions">The saved options.</param>
            <param name="backdropLimit">The backdrop limit.</param>
            <param name="screenshotLimit">The screenshot limit.</param>
            <returns><c>true</c> if the specified item contains images; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ItemImageProvider.RefreshFromProvider(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,MediaBrowser.Controller.Providers.IRemoteImageProvider,MediaBrowser.Controller.Providers.ImageRefreshOptions,MediaBrowser.Model.Configuration.TypeOptions,System.Int32,System.Int32,System.Collections.Generic.ICollection{MediaBrowser.Model.Entities.ImageType},MediaBrowser.Providers.Manager.RefreshResult,System.Threading.CancellationToken)">
            <summary>
            Refreshes from provider.
            </summary>
            <param name="item">The item.</param>
            <param name="provider">The provider.</param>
            <param name="refreshOptions">The refresh options.</param>
            <param name="savedOptions">The saved options.</param>
            <param name="backdropLimit">The backdrop limit.</param>
            <param name="screenshotLimit">The screenshot limit.</param>
            <param name="downloadedImages">The downloaded images.</param>
            <param name="result">The result.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.MetadataService`2.BeforeSave(`0,System.Boolean,MediaBrowser.Controller.Library.ItemUpdateType)">
            <summary>
            Befores the save.
            </summary>
            <param name="item">The item.</param>
            <param name="isFullRefresh">if set to <c>true</c> [is full refresh].</param>
            <param name="currentUpdateType">Type of the current update.</param>
            <returns>ItemUpdateType.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.MetadataService`2.GetProviders(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Boolean,System.Boolean)">
            <summary>
            Gets the providers.
            </summary>
            <returns>IEnumerable{`0}.</returns>
        </member>
        <member name="T:MediaBrowser.Providers.Manager.ProviderManager">
            <summary>
            Class ProviderManager
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Manager.ProviderManager._logger">
            <summary>
            The _logger
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Manager.ProviderManager._httpClient">
            <summary>
            The _HTTP client
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Manager.ProviderManager._libraryMonitor">
            <summary>
            The _directory watchers
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Manager.ProviderManager.ConfigurationManager">
            <summary>
            Gets or sets the configuration manager.
            </summary>
            <value>The configuration manager.</value>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.#ctor(MediaBrowser.Common.Net.IHttpClient,MediaBrowser.Controller.Subtitles.ISubtitleManager,MediaBrowser.Controller.Configuration.IServerConfigurationManager,MediaBrowser.Controller.Library.ILibraryMonitor,Microsoft.Extensions.Logging.ILoggerFactory,MediaBrowser.Model.IO.IFileSystem,MediaBrowser.Controller.IServerApplicationPaths,System.Func{MediaBrowser.Controller.Library.ILibraryManager},MediaBrowser.Model.Serialization.IJsonSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:MediaBrowser.Providers.Manager.ProviderManager" /> class.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IImageProvider},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IMetadataService},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IMetadataProvider},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Library.IMetadataSaver},System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Providers.IExternalId})">
            <summary>
            Adds the metadata providers.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetImages(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken,MediaBrowser.Controller.Providers.IRemoteImageProvider,System.Collections.Generic.List{System.String},System.Nullable{MediaBrowser.Model.Entities.ImageType})">
            <summary>
            Gets the images.
            </summary>
            <param name="item">The item.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="provider">The provider.</param>
            <param name="preferredLanguages">The preferred languages.</param>
            <param name="type">The type.</param>
            <returns>Task{IEnumerable{RemoteImageInfo}}.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetRemoteImageProviderInfo(MediaBrowser.Controller.Entities.BaseItem)">
            <summary>
            Gets the supported image providers.
            </summary>
            <param name="item">The item.</param>
            <returns>IEnumerable{IImageProvider}.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.GetOrder(MediaBrowser.Controller.Providers.IImageProvider)">
            <summary>
            Gets the order.
            </summary>
            <param name="provider">The provider.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.SaveMetadata(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType)">
            <summary>
            Saves the metadata.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.SaveMetadata(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves the metadata.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.SaveMetadata(MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Controller.Library.ItemUpdateType,System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Library.IMetadataSaver})">
            <summary>
            Saves the metadata.
            </summary>
            <param name="item">The item.</param>
            <param name="updateType">Type of the update.</param>
            <param name="savers">The savers.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Manager.ProviderManager.IsSaverEnabledForItem(MediaBrowser.Controller.Library.IMetadataSaver,MediaBrowser.Controller.Entities.BaseItem,MediaBrowser.Model.Configuration.LibraryOptions,MediaBrowser.Controller.Library.ItemUpdateType,System.Boolean)">
            <summary>
            Determines whether [is saver enabled for item] [the specified saver].
            </summary>
        </member>
        <member name="T:MediaBrowser.Providers.MediaInfo.AudioImageProvider">
            <summary>
            Uses ffmpeg to create video images
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.FFProbeAudioInfo.Fetch(MediaBrowser.Controller.Entities.Audio.Audio,System.Threading.CancellationToken,MediaBrowser.Model.MediaInfo.MediaInfo)">
            <summary>
            Fetches the specified audio.
            </summary>
            <param name="audio">The audio.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="mediaInfo">The media information.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.FFProbeAudioInfo.FetchDataFromTags(MediaBrowser.Controller.Entities.Audio.Audio,MediaBrowser.Model.MediaInfo.MediaInfo)">
            <summary>
            Fetches data from the tags dictionary
            </summary>
            <param name="audio">The audio.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.FFProbeVideoInfo.GetBDInfo(System.String)">
            <summary>
            Gets information about the longest playlist on a bdrom
            </summary>
            <param name="path">The path.</param>
            <returns>VideoStream.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.FFProbeVideoInfo.AddExternalSubtitles(MediaBrowser.Controller.Entities.Video,System.Collections.Generic.List{MediaBrowser.Model.Entities.MediaStream},MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <summary>
            Adds the external subtitles.
            </summary>
            <param name="video">The video.</param>
            <param name="currentStreams">The current streams.</param>
            <param name="options">The refreshOptions.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="F:MediaBrowser.Providers.MediaInfo.FFProbeVideoInfo._dummyChapterDuration">
            <summary>
            The dummy chapter duration
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.MediaInfo.FFProbeVideoInfo.AddDummyChapters(MediaBrowser.Controller.Entities.Video,System.Collections.Generic.List{MediaBrowser.Model.Entities.ChapterInfo})">
            <summary>
            Adds the dummy chapters.
            </summary>
            <param name="video">The video.</param>
            <param name="chapters">The chapters.</param>
        </member>
        <member name="P:MediaBrowser.Providers.Movies.ImdbExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Movies.ImdbExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Movies.ImdbExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Movies.ImdbExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Movies.ImdbPersonExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Movies.ImdbPersonExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Movies.ImdbPersonExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Movies.ImdbPersonExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Movies.MovieMetadataService.IsFullLocalMetadata(MediaBrowser.Controller.Entities.Movies.Movie)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Movies.MovieMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Movies.Movie},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Movies.Movie},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Movies.TrailerMetadataService.IsFullLocalMetadata(MediaBrowser.Controller.Entities.Trailer)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Movies.TrailerMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Trailer},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Trailer},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.AlbumMetadataService.EnableUpdatingPremiereDateFromChildren">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.AlbumMetadataService.EnableUpdatingGenresFromChildren">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.AlbumMetadataService.EnableUpdatingStudiosFromChildren">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.AlbumMetadataService.GetChildrenForMetadataUpdates(MediaBrowser.Controller.Entities.Audio.MusicAlbum)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.AlbumMetadataService.UpdateMetadataFromChildren(MediaBrowser.Controller.Entities.Audio.MusicAlbum,System.Collections.Generic.IList{MediaBrowser.Controller.Entities.BaseItem},System.Boolean,MediaBrowser.Controller.Library.ItemUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.AlbumMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Audio.MusicAlbum},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Audio.MusicAlbum},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.ArtistMetadataService.EnableUpdatingGenresFromChildren">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.ArtistMetadataService.GetChildrenForMetadataUpdates(MediaBrowser.Controller.Entities.Audio.MusicArtist)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.ArtistMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Audio.MusicArtist},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Audio.MusicArtist},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.AudioMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Audio.Audio},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Audio.Audio},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.ImvdbId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.ImvdbId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.ImvdbId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.ImvdbId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicVideoMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.MusicVideo},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.MusicVideo},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="F:MediaBrowser.Providers.Music.MusicBrainzAlbumProvider._musicBrainzQueryIntervalMs">
            <summary>
            The Jellyfin user-agent is unrestricted but source IP must not exceed
            one request per second, therefore we rate limit to avoid throttling.
            Be prudent, use a value slightly above the minimun required.
            https://musicbrainz.org/doc/XML_Web_Service/Rate_Limiting
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Music.MusicBrainzAlbumProvider.MusicBrainzQueryAttempts">
            <summary>
            For each single MB lookup/search, this is the maximum number of
            attempts that shall be made whilst receiving a 503 Server
            Unavailable (indicating throttled) response.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzAlbumProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzAlbumProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicBrainzAlbumProvider.GetSearchResults(MediaBrowser.Controller.Providers.AlbumInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicBrainzAlbumProvider.GetMetadata(MediaBrowser.Controller.Providers.AlbumInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicBrainzAlbumProvider.GetReleaseGroupFromReleaseId(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the release group id internal.
            </summary>
            <param name="releaseEntryId">The release entry id.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{System.String}.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicBrainzAlbumProvider.GetMusicBrainzResponse(System.String,System.Threading.CancellationToken)">
            <summary>
            Makes request to MusicBrainz server and awaits a response.
            A 503 Service Unavailable response indicates throttling to maintain a rate limit.
            A number of retries shall be made in order to try and satisfy the request before
            giving up and returning null.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicBrainzAlbumProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicBrainzArtistProvider.GetSearchResults(MediaBrowser.Controller.Providers.ArtistInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicBrainzArtistProvider.HasDiacritics(System.String)">
            <summary>
            Determines whether the specified text has diacritics.
            </summary>
            <param name="text">The text.</param>
            <returns><c>true</c> if the specified text has diacritics; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicBrainzArtistProvider.UrlEncode(System.String)">
            <summary>
            Encodes an URL.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzReleaseGroupExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzReleaseGroupExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzReleaseGroupExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicBrainzReleaseGroupExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzAlbumArtistExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzAlbumArtistExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzAlbumArtistExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicBrainzAlbumArtistExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzAlbumExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzAlbumExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzAlbumExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicBrainzAlbumExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzArtistExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzArtistExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzArtistExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicBrainzArtistExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzOtherArtistExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzOtherArtistExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzOtherArtistExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicBrainzOtherArtistExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzTrackId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzTrackId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Music.MusicBrainzTrackId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Music.MusicBrainzTrackId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.MusicGenres.MusicGenreMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Audio.MusicGenre},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Audio.MusicGenre},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Omdb.OmdbItemProvider.SearchResultList.Search">
            <summary>
            Gets or sets the results.
            </summary>
            <value>The results.</value>
        </member>
        <member name="M:MediaBrowser.Providers.People.PersonMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Person},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Person},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.People.TvdbPersonImageProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.People.TvdbPersonImageProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.People.TvdbPersonImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.People.TvdbPersonImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.People.TvdbPersonImageProvider.GetImages(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.People.TvdbPersonImageProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Photos.PhotoAlbumMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.PhotoAlbum},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.PhotoAlbum},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Photos.PhotoMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Photo},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Photo},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Playlists.PlaylistMetadataService.EnableUpdatingGenresFromChildren">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Playlists.PlaylistMetadataService.EnableUpdatingOfficialRatingFromChildren">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Playlists.PlaylistMetadataService.EnableUpdatingStudiosFromChildren">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Playlists.PlaylistMetadataService.GetChildrenForMetadataUpdates(MediaBrowser.Controller.Playlists.Playlist)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Playlists.PlaylistMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Playlists.Playlist},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Playlists.Playlist},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumImageProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumImageProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumImageProvider.GetImages(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumImageProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumProvider.GetSearchResults(MediaBrowser.Controller.Providers.AlbumInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumProvider.GetMetadata(MediaBrowser.Controller.Providers.AlbumInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistImageProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistImageProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistImageProvider.GetSupportedImages(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistImageProvider.GetImages(MediaBrowser.Controller.Entities.BaseItem,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistImageProvider.Supports(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistProvider.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistProvider.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistProvider.GetSearchResults(MediaBrowser.Controller.Providers.ArtistInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistProvider.GetMetadata(MediaBrowser.Controller.Providers.ArtistInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistProvider.GetArtistDataPath(MediaBrowser.Common.Configuration.IApplicationPaths,System.String)">
            <summary>
            Gets the artist data path.
            </summary>
            <param name="appPaths">The application paths.</param>
            <param name="musicBrainzArtistId">The music brainz artist identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistProvider.GetArtistDataPath(MediaBrowser.Common.Configuration.IApplicationPaths)">
            <summary>
            Gets the artist data path.
            </summary>
            <param name="appPaths">The application paths.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistProvider.GetImageResponse(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbAlbumExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherAlbumExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherAlbumExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherAlbumExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherAlbumExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbArtistExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherArtistExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherArtistExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherArtistExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Plugins.AudioDb.AudioDbOtherArtistExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Studios.StudioMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Studio},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Studio},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Studios.StudiosImageProvider.EnsureList(System.String,System.String,MediaBrowser.Common.Net.IHttpClient,MediaBrowser.Model.IO.IFileSystem,System.Threading.CancellationToken)">
            <summary>
            Ensures the list.
            </summary>
            <param name="url">The URL.</param>
            <param name="file">The file.</param>
            <param name="httpClient">The HTTP client.</param>
            <param name="fileSystem">The file system.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="E:MediaBrowser.Providers.Subtitles.SubtitleManager.SubtitleDownloadFailure">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.AddParts(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Subtitles.ISubtitleProvider})">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.SearchSubtitles(MediaBrowser.Controller.Subtitles.SubtitleSearchRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.DownloadSubtitles(MediaBrowser.Controller.Entities.Video,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.DownloadSubtitles(MediaBrowser.Controller.Entities.Video,MediaBrowser.Model.Configuration.LibraryOptions,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.SearchSubtitles(MediaBrowser.Controller.Entities.Video,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.DeleteSubtitles(MediaBrowser.Controller.Entities.BaseItem,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.GetRemoteSubtitles(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Subtitles.SubtitleManager.GetSupportedProviders(MediaBrowser.Controller.Entities.BaseItem)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.BoxSets.TmdbBoxSetExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.BoxSets.TmdbBoxSetExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.BoxSets.TmdbBoxSetExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.BoxSets.TmdbBoxSetExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.BoxSets.TmdbBoxSetImageProvider.GetPosters(MediaBrowser.Providers.Tmdb.Models.Collections.CollectionImages)">
            <summary>
            Gets the posters.
            </summary>
            <param name="images">The images.</param>
            <returns>IEnumerable{MovieDbProvider.Poster}.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.BoxSets.TmdbBoxSetImageProvider.GetBackdrops(MediaBrowser.Providers.Tmdb.Models.Collections.CollectionImages)">
            <summary>
            Gets the backdrops.
            </summary>
            <param name="images">The images.</param>
            <returns>IEnumerable{MovieDbProvider.Backdrop}.</returns>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.MovieResult.Adult">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MediaBrowser.Providers.Tmdb.Models.Search.MovieResult" /> is adult.
            </summary>
            <value><c>true</c> if adult; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.MovieResult.Backdrop_Path">
            <summary>
            Gets or sets the backdrop_path.
            </summary>
            <value>The backdrop_path.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.MovieResult.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.MovieResult.Original_Title">
            <summary>
            Gets or sets the original_title.
            </summary>
            <value>The original_title.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.MovieResult.Original_Name">
            <summary>
            Gets or sets the original_name.
            </summary>
            <value>The original_name.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.MovieResult.Release_Date">
            <summary>
            Gets or sets the release_date.
            </summary>
            <value>The release_date.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.MovieResult.Poster_Path">
            <summary>
            Gets or sets the poster_path.
            </summary>
            <value>The poster_path.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.MovieResult.Popularity">
            <summary>
            Gets or sets the popularity.
            </summary>
            <value>The popularity.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.MovieResult.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.MovieResult.Vote_Average">
            <summary>
            Gets or sets the vote_average.
            </summary>
            <value>The vote_average.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.MovieResult.Name">
            <summary>
            For collection search results
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.MovieResult.Vote_Count">
            <summary>
            Gets or sets the vote_count.
            </summary>
            <value>The vote_count.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.PersonSearchResult.Adult">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MediaBrowser.Providers.Tmdb.Models.Search.PersonSearchResult" /> is adult.
            </summary>
            <value><c>true</c> if adult; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.PersonSearchResult.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.PersonSearchResult.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.PersonSearchResult.Profile_Path">
            <summary>
            Gets or sets the profile_ path.
            </summary>
            <value>The profile_ path.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.TmdbSearchResult`1.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <value>The page.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.TmdbSearchResult`1.Results">
            <summary>
            Gets or sets the results.
            </summary>
            <value>The results.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.TmdbSearchResult`1.Total_Pages">
            <summary>
            Gets or sets the total_pages.
            </summary>
            <value>The total_pages.</value>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Models.Search.TmdbSearchResult`1.Total_Results">
            <summary>
            Gets or sets the total_results.
            </summary>
            <value>The total_results.</value>
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.Movies.GenericTmdbMovieInfo`1.FetchMovieData(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Fetches the movie data.
            </summary>
            <param name="tmdbId">The TMDB identifier.</param>
            <param name="imdbId">The imdb identifier.</param>
            <param name="language">The language.</param>
            <param name="preferredCountryCode">The preferred country code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{`0}.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.Movies.GenericTmdbMovieInfo`1.ProcessMainInfo(MediaBrowser.Controller.Providers.MetadataResult{`0},MediaBrowser.Providers.Tmdb.Movies.TmdbSettingsResult,System.String,MediaBrowser.Providers.Tmdb.Models.Movies.MovieResult)">
            <summary>
            Processes the main info.
            </summary>
            <param name="resultItem">The result item.</param>
            <param name="settings">The settings.</param>
            <param name="preferredCountryCode">The preferred country code.</param>
            <param name="movieData">The movie data.</param>
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.Movies.TmdbImageProvider.GetPosters(MediaBrowser.Providers.Tmdb.Models.General.Images)">
            <summary>
            Gets the posters.
            </summary>
            <param name="images">The images.</param>
            <returns>IEnumerable{MovieDbProvider.Poster}.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.Movies.TmdbImageProvider.GetBackdrops(MediaBrowser.Providers.Tmdb.Models.General.Images)">
            <summary>
            Gets the backdrops.
            </summary>
            <param name="images">The images.</param>
            <returns>IEnumerable{MovieDbProvider.Backdrop}.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.Movies.TmdbImageProvider.FetchImages(MediaBrowser.Controller.Entities.BaseItem,System.String,MediaBrowser.Model.Serialization.IJsonSerializer,System.Threading.CancellationToken)">
            <summary>
            Fetches the images.
            </summary>
            <param name="item">The item.</param>
            <param name="language">The language.</param>
            <param name="jsonSerializer">The json serializer.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{MovieImages}.</returns>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Movies.TmdbMovieExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Movies.TmdbMovieExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.Movies.TmdbMovieExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.Movies.TmdbMovieExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.Tmdb.Movies.TmdbMovieProvider">
            <summary>
            Class MovieDbProvider
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.Tmdb.Movies.TmdbMovieProvider._tmdbSettings">
            <summary>
            The _TMDB settings task
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.Movies.TmdbMovieProvider.GetTmdbSettings(System.Threading.CancellationToken)">
            <summary>
            Gets the TMDB settings.
            </summary>
            <returns>Task{TmdbSettingsResult}.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.Movies.TmdbMovieProvider.GetMovieDataPath(MediaBrowser.Common.Configuration.IApplicationPaths,System.String)">
            <summary>
            Gets the movie data path.
            </summary>
            <param name="appPaths">The app paths.</param>
            <param name="tmdbId">The TMDB id.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.Movies.TmdbMovieProvider.DownloadMovieInfo(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Downloads the movie info.
            </summary>
            <param name="id">The id.</param>
            <param name="preferredMetadataLanguage">The preferred metadata language.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.Movies.TmdbMovieProvider.FetchMainResult(System.String,System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Fetches the main result.
            </summary>
            <param name="id">The id.</param>
            <param name="isTmdbId">if set to <c>true</c> [is TMDB identifier].</param>
            <param name="language">The language.</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Task{CompleteMovieData}.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.Movies.TmdbMovieProvider.GetMovieDbResponse(MediaBrowser.Common.Net.HttpRequestOptions)">
            <summary>
            Gets the movie db response.
            </summary>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.People.TmdbPersonExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.People.TmdbPersonExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.People.TmdbPersonExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.People.TmdbPersonExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.People.TmdbPersonProvider.GetTmdbId(MediaBrowser.Controller.Providers.PersonLookupInfo,System.Threading.CancellationToken)">
            <summary>
            Gets the TMDB id.
            </summary>
            <param name="info">The information.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{System.String}.</returns>
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.TV.TmdbSeriesExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.TV.TmdbSeriesExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Tmdb.TV.TmdbSeriesExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.TV.TmdbSeriesExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.TV.TmdbSeriesImageProvider.GetPosters(MediaBrowser.Providers.Tmdb.Models.General.Images)">
            <summary>
            Gets the posters.
            </summary>
            <param name="images">The images.</param>
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.TV.TmdbSeriesImageProvider.GetBackdrops(MediaBrowser.Providers.Tmdb.Models.General.Images)">
            <summary>
            Gets the backdrops.
            </summary>
            <param name="images">The images.</param>
        </member>
        <member name="M:MediaBrowser.Providers.Tmdb.TV.TmdbSeriesImageProvider.FetchImages(MediaBrowser.Controller.Entities.BaseItem,System.String,MediaBrowser.Model.Serialization.IJsonSerializer,System.Threading.CancellationToken)">
            <summary>
            Fetches the images.
            </summary>
            <param name="item">The item.</param>
            <param name="language">The language.</param>
            <param name="jsonSerializer">The json serializer.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{MovieImages}.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.TV.DummySeasonProvider.AddSeason(MediaBrowser.Controller.Entities.TV.Series,System.Nullable{System.Int32},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Adds the season.
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.TV.EpisodeMetadataService.BeforeSaveInternal(MediaBrowser.Controller.Entities.TV.Episode,System.Boolean,MediaBrowser.Controller.Library.ItemUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.EpisodeMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.TV.Episode},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.TV.Episode},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.MissingEpisodeProvider.HasInvalidContent(System.Collections.Generic.IList{MediaBrowser.Controller.Entities.BaseItem})">
            <summary>
            Returns true if a series has any seasons or episodes without season or episode numbers
            If this data is missing no virtual items will be added in order to prevent possible duplicates
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.TV.MissingEpisodeProvider.RemoveObsoleteOrMissingEpisodes(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Entities.BaseItem},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.Int32,System.DateTime}},System.Boolean)">
            <summary>
            Removes the virtual entry after a corresponding physical version has been added
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.TV.MissingEpisodeProvider.RemoveObsoleteOrMissingSeasons(System.Collections.Generic.IList{MediaBrowser.Controller.Entities.BaseItem},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.Int32,System.DateTime}})">
            <summary>
            Removes the obsolete or missing seasons.
            </summary>
            <param name="allRecursiveChildren"></param>
            <param name="episodeLookup">The episode lookup.</param>
            <returns><see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.TV.MissingEpisodeProvider.AddEpisode(MediaBrowser.Controller.Entities.TV.Series,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Adds the episode.
            </summary>
            <param name="series">The series.</param>
            <param name="seasonNumber">The season number.</param>
            <param name="episodeNumber">The episode number.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.TV.MissingEpisodeProvider.GetExistingEpisode(System.Collections.Generic.IEnumerable{MediaBrowser.Controller.Entities.TV.Episode},System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.Int32},System.ValueTuple{System.Int32,System.Int32,System.DateTime})">
            <summary>
            Gets the existing episode.
            </summary>
            <param name="existingEpisodes">The existing episodes.</param>
            <param name="seasonCounts"></param>
            <param name="episodeTuple"></param>
            <returns>Episode.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeasonMetadataService.BeforeSaveInternal(MediaBrowser.Controller.Entities.TV.Season,System.Boolean,MediaBrowser.Controller.Library.ItemUpdateType)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.SeasonMetadataService.EnableUpdatingPremiereDateFromChildren">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeasonMetadataService.GetChildrenForMetadataUpdates(MediaBrowser.Controller.Entities.TV.Season)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeasonMetadataService.UpdateMetadataFromChildren(MediaBrowser.Controller.Entities.TV.Season,System.Collections.Generic.IList{MediaBrowser.Controller.Entities.BaseItem},System.Boolean,MediaBrowser.Controller.Library.ItemUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeasonMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.TV.Season},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.TV.Season},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeriesMetadataService.AfterMetadataRefresh(MediaBrowser.Controller.Entities.TV.Series,MediaBrowser.Controller.Providers.MetadataRefreshOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeriesMetadataService.IsFullLocalMetadata(MediaBrowser.Controller.Entities.TV.Series)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.SeriesMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.TV.Series},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.TV.Series},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:MediaBrowser.Providers.TV.TheTVDB.TvdbEpisodeProvider">
            <summary>
            Class RemoteEpisodeProvider
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.TV.TheTVDB.TvdbSeriesProvider.IsValidSeries(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Check whether a dictionary of provider IDs includes an entry for a valid TV metadata provider.
            </summary>
            <param name="seriesProviderIds">The dictionary to check.</param>
            <returns>True, if the dictionary contains a valid TV provider ID, otherwise false.</returns>
        </member>
        <member name="M:MediaBrowser.Providers.TV.TheTVDB.TvdbSeriesProvider.FindSeries(System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the series.
            </summary>
            <param name="name">The name.</param>
            <param name="year">The year.</param>
            <param name="language">The language.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task{System.String}.</returns>
        </member>
        <member name="F:MediaBrowser.Providers.TV.TheTVDB.TvdbSeriesProvider.remove">
            <summary>
            The remove
            </summary>
        </member>
        <member name="F:MediaBrowser.Providers.TV.TheTVDB.TvdbSeriesProvider.spacers">
            <summary>
            The spacers
            </summary>
        </member>
        <member name="M:MediaBrowser.Providers.TV.TheTVDB.TvdbSeriesProvider.GetComparableName(System.String)">
            <summary>
            Gets the name of the comparable.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:MediaBrowser.Providers.TV.Zap2ItExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.Zap2ItExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.Zap2ItExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.Zap2ItExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.TvdbExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.TvdbExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.TvdbExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.TvdbExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.TvdbSeasonExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.TvdbSeasonExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.TvdbSeasonExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.TvdbSeasonExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.TvdbEpisodeExternalId.Name">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.TvdbEpisodeExternalId.Key">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.TV.TvdbEpisodeExternalId.UrlFormatString">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.TV.TvdbEpisodeExternalId.Supports(MediaBrowser.Model.Entities.IHasProviderIds)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Users.UserMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.User},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.User},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:MediaBrowser.Providers.Videos.VideoMetadataService.Order">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Videos.VideoMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Video},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Video},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MediaBrowser.Providers.Years.YearMetadataService.MergeData(MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Year},MediaBrowser.Controller.Providers.MetadataResult{MediaBrowser.Controller.Entities.Year},MediaBrowser.Model.Entities.MetadataFields[],System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
    </members>
</doc>
